# Generated by Selenium IDE
import openpyxl
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

from selenium.common.exceptions import NoSuchElementException

class FileExcelReader:
    file = ""
    sheetName = ""

    def __init__(self, file, sheetName):
        self.file = file
        self.sheetName = sheetName

    def getRowCount(self):
        wordbook = openpyxl.load_workbook(self.file)
        sheet = wordbook[self.sheetName]
        return (sheet.max_row)

    def getColumnCount(self):
        wordbook = openpyxl.load_workbook(self.file)
        sheet = wordbook[self.sheetName]
        return (sheet.max_column)

    def readData(self, rownum, colnum):
        wordbook = openpyxl.load_workbook(self.file)
        sheet = wordbook[self.sheetName]
        return sheet.cell(row=rownum, column=colnum).value

    def writeData(self, data, rownum, colnum):
        wordbook = openpyxl.load_workbook(self.file)
        sheet = wordbook[self.sheetName]
        sheet.cell(row=rownum, column=colnum).value = data
        wordbook.save(self.file)

class TestSiteHomeSettings():
  def setup_method(self):
    self.driver = webdriver.Chrome()
    self.driver.maximize_window()
    self.vars = {}

    self.driver.get('https://sandbox.moodledemo.net/login/index.php')
    usernameInput = self.driver.find_element(By.NAME,"username")
    passwordInput = self.driver.find_element(By.NAME,"password")
    submitBtn = self.driver.find_element(By.ID,"loginbtn")
    usernameInput.clear()
    usernameInput.send_keys("admin")
    passwordInput.send_keys("sandbox")    
    submitBtn.click()
    time.sleep(1)
  
  def teardown_method(self):
    self.driver.quit()

  def test_site_home_settings(self, _full_site_name, _short_site_name, _maximum_num_of_courses, _comment_displayed_per_page, expectedResult):
    
    settingBtn = self.driver.find_element(By.CSS_SELECTOR,'li[data-key="editsettings"]')
    settingBtn.click()
    time.sleep(1)

    full_site_name = self.driver.find_element(By.XPATH,'/html/body/div[3]/div[4]/div/div[3]/div/section/div/form/div/fieldset/div[2]/div[2]/div[1]/input')
    full_site_name.clear()
    if _full_site_name: full_site_name.send_keys(_full_site_name)
    time.sleep(1)

    short_site_name = self.driver.find_element(By.XPATH,'/html/body/div[3]/div[4]/div/div[3]/div/section/div/form/div/fieldset/div[3]/div[2]/div[1]/input')
    short_site_name.clear()
    if _short_site_name: short_site_name.send_keys(_short_site_name)
    time.sleep(1)

    maximum_num_of_courses = self.driver.find_element(By.XPATH,'/html/body/div[3]/div[4]/div/div[3]/div/section/div/form/div/fieldset/div[8]/div[2]/div[1]/input')
    maximum_num_of_courses.clear()
    maximum_num_of_courses.send_keys(_maximum_num_of_courses)
    time.sleep(1)

    comment_displayed_per_page = self.driver.find_element(By.XPATH,'/html/body/div[3]/div[4]/div/div[3]/div/section/div/form/div/fieldset/div[11]/div[2]/div[1]/input')
    comment_displayed_per_page.clear()
    comment_displayed_per_page.send_keys(_comment_displayed_per_page)
    time.sleep(1)
    

    saveBtn = self.driver.find_element(By.XPATH,'/html/body/div[3]/div[4]/div/div[3]/div/section/div/form/div/div/div/button')
    saveBtn.click()
    time.sleep(1)
    
    if expectedResult == "Success": #done
        alert = self.driver.find_element(By.XPATH,'/html/body/div[3]/div[4]/div/div[3]/div/section/span/div')
        assert alert != None
        time.sleep(1)
        return True
    elif expectedResult == "Not success": #done
        alert = self.driver.find_element(By.XPATH,'//*[@id="region-main"]/div/div')
        assert alert != None
        return True


if __name__ == "__main__":
    excel = FileExcelReader('SecB_sitehomesettings_data.xlsx', 'Sheet1')
    test = TestSiteHomeSettings()
    
    nRows = excel.getRowCount()
    for row in range(2, nRows + 1):
        full_site_name = excel.readData(row,1)
        short_name = excel.readData(row,2)
        maximumCourse = excel.readData(row,3)
        comment_displayed_per_page = excel.readData(row,4)
        expectedResult = excel.readData(row,5)
        test.setup_method()
        try:
            result = test.test_site_home_settings(full_site_name, short_name, maximumCourse, comment_displayed_per_page,  expectedResult)
            excel.writeData("Passed",row,6)
        except:
            excel.writeData("Failed",row,6)
        test.teardown_method()


    